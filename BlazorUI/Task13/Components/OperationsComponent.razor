@using Core.Models
@using Services.DTO
@using Services.Interfaces
@using AutoMapper
@inject IOperationsService OperationsService
@inject IOperationTypesService OperationTypesService
@inject IMapper Mapper


@if (CreateDialogOpen) {
    <DialogComponent Title="Create" OnClose="@OnCreateDialogClose">
        <OperationFormComponent Operation="@newOperation" />
    </DialogComponent>
}

@if (UpdateDialogOpen) {
    <DialogComponent Title="Update" OnClose="@OnUpdateDialogClose">
        <OperationFormComponent Operation="@updatedOperation" />
    </DialogComponent>
}

@if (DeleteDialogOpen) {
    <DialogComponent Title="Delete" OnClose="@OnDeleteDialogClose">
        Do you want to delete this entry?
    </DialogComponent>
}

@if (showErrorMessage) {
    <div>
        <label class="alert-danger">@errorMessage</label>
    </div>
}

<table class="table">
    <thead>
        <tr>
            <th>Operation Name</th>
            <th>Operation Type</th>
            <th>Amount</th>
            <th>Date</th>
            <th>
                <button type="button" class="btn" @onclick="() => OpenCreateDialog()">Create</button>
            </th>
        </tr>
    </thead>
    <tbody>
        @foreach (var operation in Operations) {
             <tr class="background-color:#FF0000">
                <td class="background-color:#FF0000">@operation.Name</td>
                <td>@operation.OperationTypeDTO.Name</td>
                <td>@operation.Amount</td>
                <td>@operation.Date.ToShortDateString()</td>
                <td>
                    <button type="button" class="btn" @onclick="() => OpenUpdateDialog(operation)">Edit</button>
                    <button type="button" class="btn" @onclick="() => OpenDeleteDialog(operation)">Delete</button>
                </td>
              </tr>    
        }
    </tbody>
</table>

@code {
    [Parameter]
    public List<Operation> Operations { get; set; } = new List<Operation>();
    [Parameter]
    public EventCallback OnUpdateCallback { get; set; }

    private OperationCreateDTO newOperation = new OperationCreateDTO();
    private List<OperationType> OperationTypes = new List<OperationType>();
    private Operation currentOperation;
    private OperationCreateDTO updatedOperation;
    private bool showErrorMessage;
    private string errorMessage;

    protected override async Task OnInitializedAsync() {
        try {
            OperationTypes = await OperationTypesService.GetAllAsync();
        }
        catch (Exception ex) {
            errorMessage = ex.Message;
            showErrorMessage = true;
        }
    }

    #region DeleteDialog
    public bool DeleteDialogOpen { get; set; }

    private void OpenDeleteDialog(Operation operation) {
        DeleteDialogOpen = true;
        currentOperation = operation;
        StateHasChanged();
    }

    private async Task OnDeleteDialogClose(bool accepted) {
        DeleteDialogOpen = false;

        if (accepted) {
            try {
                await OperationsService.DeleteAsync(currentOperation.Id);
            }
            catch (Exception ex) {
                errorMessage = ex.Message;
                showErrorMessage = true;
            }
        }
        currentOperation = null;
        StateHasChanged();
        await OnUpdateCallback.InvokeAsync();
    }
    #endregion

    #region CreateDialog
    public bool CreateDialogOpen { get; set; }

    private void OpenCreateDialog() {
        CreateDialogOpen = true;
        StateHasChanged();
    }

    private async Task OnCreateDialogClose(bool accepted) {
        CreateDialogOpen = false;

        if (accepted) {
            try {
                await OperationsService.CreateAsync(newOperation);
            }
            catch (Exception ex) {
                errorMessage = ex.Message;
                showErrorMessage = true;
            }

        }

        StateHasChanged();
        await OnUpdateCallback.InvokeAsync();
    }
    #endregion

    #region UpdateDialog
    public bool UpdateDialogOpen { get; set; }

    private void OpenUpdateDialog(Operation operation) {
        UpdateDialogOpen = true;
        currentOperation = operation;
        updatedOperation = Mapper.Map<OperationCreateDTO>(operation);
        StateHasChanged();
    }

    private async Task OnUpdateDialogClose(bool accepted) {
        UpdateDialogOpen = false;
        if (accepted) {
            try {
                await OperationsService.UpdateAsync(currentOperation.Id, updatedOperation);
            }
            catch (Exception ex) {
                errorMessage = ex.Message;
                showErrorMessage = true;
            }
        }
        StateHasChanged();
        await OnUpdateCallback.InvokeAsync();
    }
    #endregion
}
