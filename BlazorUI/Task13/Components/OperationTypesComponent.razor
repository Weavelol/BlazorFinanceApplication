@using Core.Models
@using Services.Interfaces
@inject IOperationTypesService OperationTypesService


@if (CreateDialogOpen) {
    <DialogComponent Title="Create" OnClose="@OnCreateDialogCloseAsync">
        <OperationTypesFormComponent OperationType="@currentType"/>
    </DialogComponent>
}

@if (DeleteDialogOpen) {
    <DialogComponent Title="Delete"  OnClose="@OnDeleteDialogCloseAsync">
        Delete @currentType.Name?
    </DialogComponent>
}

@if (showErrorMessage) { 
    <div>
        <label class="alert-danger">@errorMessage</label>
    </div>
}
<table class="table">
    <thead>
        <tr>
            <th>Operation Type Name</th>
            <th>Income/Expense</th>
            <th><button type="button" class="btn" @onclick="() => OpenCreateDialog()">Create</button></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var operationType in operationTypes) {
            <tr>
                <td>@operationType.Name</td>
                @if (operationType.IsIncome) {
                    <td>Income</td>
                }
                else {
                    <td>Expense</td>
                }
                <td><button type="button" class="btn" @onclick="() => OpenDeleteDialog(operationType)">Delete</button></td>
            </tr>
        }
    </tbody>
</table>

@code {
    private List<OperationType> operationTypes;
    private OperationType currentType;
    private bool showErrorMessage;
    private string errorMessage;

    protected override async Task OnInitializedAsync() {
        operationTypes = new List<OperationType>();
        currentType = new OperationType();
        await LoadDataAsync();
    }

    private async Task LoadDataAsync() {
        try {
            operationTypes = await OperationTypesService.GetAllAsync();
        }
        catch(Exception ex) {
            errorMessage = ex.Message;
            showErrorMessage = true;
        }
    }

    #region CreateDialog
    private bool CreateDialogOpen { get; set; }
    private void OpenCreateDialog() {
        currentType = new OperationType();
        CreateDialogOpen = true;
        StateHasChanged();
    }

    private async Task OnCreateDialogCloseAsync(bool accepted) {
        CreateDialogOpen = false;
                if (accepted) {
            try {
                await OperationTypesService.CreateAsync(currentType);
            }
            catch (Exception ex) {
                errorMessage = ex.Message;
                showErrorMessage = true;
            }
        }
        StateHasChanged();
        await LoadDataAsync();
    }
    #endregion

    #region DeleteDialog
    private bool DeleteDialogOpen { get; set; }
    private void OpenDeleteDialog(OperationType operationType) {
        DeleteDialogOpen = true;
        currentType = operationType;
        StateHasChanged();
    }

    private async Task OnDeleteDialogCloseAsync(bool accepted) {
        DeleteDialogOpen = false;
        if (accepted) {
            try {
                await OperationTypesService.DeleteAsync(currentType.Id);
            }
            catch (Exception ex) {
                errorMessage = ex.Message;
                showErrorMessage = true;
            }
        }
        StateHasChanged();
        await LoadDataAsync();
    }
    #endregion
}
