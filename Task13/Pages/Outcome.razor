@page "/outcome"
@using Task13.Components
@using Core.Enums
@using Core.Structs
@using Core.Models
@using Services.Interfaces
@inject IOutcomeService OutcomeService


<h1>Outcome</h1>

<div>
    <select @bind="type">
        <option value="Daily">Daily</option>
        <option value="Monthly">Monthly</option>
    </select>
</div>

@if (type is OutcomeType.Daily) {
    <OutcomeDailyComponent SelectedDate="selectedDate" OnUpdateCallback="@LoadDataAsync"/>
}
else {
    <OutcomeMonthlyComponent SelectedPeriod="selectedPeriod" OnUpdateCallback="LoadDataAsync"/>
}

<p>
    <label>Total Income: @currentOutcome.TotalIncome</label>
</p>
<p>
    <label>Total Expenses: @currentOutcome.TotalExpenses</label>
</p>

<OperationsComponent Operations="currentOutcome.Operations" OnUpdateCallback="LoadDataAsync"/>

@code {
    private Core.Models.Outcome currentOutcome = new Core.Models.Outcome();
    private OutcomeType type = OutcomeType.Daily;


    private Date selectedDate = new Date { CurrentDate = DateTime.Now };
    private Period selectedPeriod = new Period {
        EndDate = DateTime.Now,
        StartDate = DateTime.Now.AddMonths(-1)
    };
    private List<Operation> operations = new List<Operation>();

    protected override async Task OnInitializedAsync() {
        await LoadDataAsync();
    }

    private async Task LoadDataAsync() {
        if(type is OutcomeType.Daily) {
            currentOutcome = await OutcomeService.GetOutcomeAtDate(selectedDate);
        }
        if(type is OutcomeType.Monthly) {
            currentOutcome = await OutcomeService.GetOutcomeAtPeriod(selectedPeriod);
        }
    }
}
