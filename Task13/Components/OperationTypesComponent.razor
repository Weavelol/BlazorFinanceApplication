@using Core.Models
@using Services.Interfaces
@inject IOperationTypesService OperationTypesService


@if (CreateDialogOpen) {
    <DialogComponent Title="Create Operation Type" OnClose="@OnCreateDialogCloseAsync">
        <EditForm Model="@newType">
            <div class="form-group">
                <label for="Name">Name</label>
                <InputText @bind-Value=newType.Name class="form-control" id="Name" />
            </div>
            <div class="form-group">
                <label for="IsIncome">IsIncome</label>
                <InputCheckbox @bind-Value="newType.IsIncome" class="form-control" id="IsIncome"/>
            </div>
        </EditForm>
    </DialogComponent>
}

@if (DeleteDialogOpen) {
    <DialogComponent Title="Are you sure?"  OnClose="@OnDeleteDialogCloseAsync">
        Delete @currentType.Name?
    </DialogComponent>
}



<table class="table">
    <thead>
        <tr>
            <th>Operation Type Name</th>
            <th>Income/Expense</th>
            <th>
                <button type="button" class="btn" @onclick="() => OpenCreateDialog()">Create</button>
            </th>
        </tr>
    </thead>
    <tbody>
        @foreach (var operationType in operationTypes) {
            <tr>
                <td>@operationType.Name</td>
                @if (operationType.IsIncome) {
                    <td>Income</td>
                }
                else {
                    <td>Expense</td>
                }
                <td>
                    <button type="button" class="btn" @onclick="() => OpenDeleteDialog(operationType)">Delete</button>
                </td>
            </tr>
        }
    </tbody>
</table>

@code {
    private List<OperationType> operationTypes = new List<OperationType>();
    private OperationType newType = new OperationType();
    private OperationType currentType;

    protected override async Task OnInitializedAsync() {
        await LoadDataAsync();
    }

    #region DeleteDialog

    public bool DeleteDialogOpen { get; set; }

    private void OpenDeleteDialog(OperationType operationType) {
        DeleteDialogOpen = true;
        currentType = operationType;
        StateHasChanged();
    }

    private async Task OnDeleteDialogCloseAsync(bool accepted) {
        DeleteDialogOpen = false;
        if (accepted) {
            await OperationTypesService.DeleteAsync(currentType.Id);
        }
        currentType = null;
        StateHasChanged();
        await LoadDataAsync();
    }

    #endregion

    #region CreateDialog

    public bool CreateDialogOpen { get; set; }

    private void OpenCreateDialog() {
        CreateDialogOpen = true;
        StateHasChanged();
    }

    private async Task OnCreateDialogCloseAsync(bool accepted) {
        CreateDialogOpen = false;

        if (accepted) {
            await OperationTypesService.CreateAsync(newType);
        }
        StateHasChanged();
        await LoadDataAsync();
    }
    #endregion

    private async Task LoadDataAsync() {
        operationTypes = await OperationTypesService.GetAllAsync();
    }
}
