@using Core.Models
@using Services.Interfaces
@inject IOperationsService OperationsService


@if (CreateDialogOpen) {
    <DialogComponent Title="Create Operation" OnClose="@OnCreateDialogClose">
        <form>
            <div class="form-group">
                <label for="name">Name:</label>
                <input type="text" class="form-control" id="name">
            </div>
            <div class="form-group">
                <label for="type">Operation Type:</label>
                <select class="form-control" id="type">
                    <option value="Income">Income</option>
                    <option value="Expense">Expense</option>
                </select>
            </div>
            <div class="form-group">
                <label for="amount">Amount:</label>
                <input type="number" class="form-control" id="amount">
            </div>
            <div class="form-group">
                <label for="date">Date:</label>
                <input type="date" class="form-control" id="date">
            </div>
        </form>
    </DialogComponent>
}
@if (UpdateDialogOpen) {
    <DialogComponent Title="Update Operation X" OnClose="@OnUpdateDialogClose">
        <form>
            <div class="form-group">
                <label for="name">Name:</label>
                <input type="text" class="form-control" id="name">
            </div>
            <div class="form-group">
                <label for="type">Operation Type:</label>
                <select class="form-control" id="type">
                    <option value="Income">Income</option>
                    <option value="Expense">Expense</option>
                </select>
            </div>
            <div class="form-group">
                <label for="amount">Amount:</label>
                <input type="number" class="form-control" id="amount">
            </div>
            <div class="form-group">
                <label for="date">Date:</label>
                <input type="date" class="form-control" id="date">
            </div>
        </form>
    </DialogComponent>
}
@if (DeleteDialogOpen) {
    <DialogComponent Title="Are you sure?" OnClose="@OnDeleteDialogClose">
        Do you want to delete this entry?
    </DialogComponent>
}

<table class="table">
    <thead>
        <tr>
            <th>Operation Name</th>
            <th>Operation Type</th>
            <th>Amount</th>
            <th>Date</th>
            <th>
                <button type="button" class="btn" @onclick="() => OpenCreateDialog()">Create</button>
            </th>
        </tr>
    </thead>
    <tbody>
        @foreach (var operation in operations) {
            <tr>
                <td>@operation.Name</td>
                <td>@operation.OperationType.Name</td>
                <td>@operation.Amount</td>
                <td>@operation.Date.ToShortDateString()</td>
                <td>
                    <button type="button" class="btn" @onclick="() => OpenUpdateDialog()">Edit</button>
                    <button type="button" class="btn" @onclick="() => OpenDeleteDialog()">Delete</button>
                </td>
            </tr>
        }
    </tbody>
</table>

@code {
    private List<Operation> operations = new List<Operation>();

    protected override async Task OnInitializedAsync() {
        var o = await OperationsService.GetAllAsync();
        operations = o.ToList();
    }

    #region DeleteDialog
    public bool DeleteDialogOpen { get; set; }

    private void OpenDeleteDialog() {
        DeleteDialogOpen = true;
        StateHasChanged();
    }
    private async Task OnDeleteDialogClose(bool accepted) {
        DeleteDialogOpen = false;
        await OperationsService.DeleteAsync(new Guid());
        StateHasChanged();
    }
    #endregion

    #region CreateDialog
    public bool CreateDialogOpen { get; set; }

    private void OpenCreateDialog() {
        CreateDialogOpen = true;
        StateHasChanged();
    }

    private async Task OnCreateDialogClose(bool accepted) {
        CreateDialogOpen = false;

        //TODO Create Logic

        StateHasChanged();
    }
    #endregion

    #region UpdateDialog
    public bool UpdateDialogOpen { get; set; }

    private void OpenUpdateDialog() {
        UpdateDialogOpen = true;
        StateHasChanged();
    }

    private async Task OnUpdateDialogClose(bool accepted) {
        UpdateDialogOpen = false;

        //TODO Update logic 

        StateHasChanged();
    }
    #endregion
}
