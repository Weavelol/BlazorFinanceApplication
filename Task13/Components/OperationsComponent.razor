@using Core.Models
@using Services.DTO
@using Services.Interfaces
@inject IOperationsService OperationsService
@inject IOperationTypesService OperationTypesService


@if (CreateDialogOpen) {
    <DialogComponent Title="Create Operation" OnClose="@OnCreateDialogClose">
        <EditForm Model="@newOperation">
            <div class="form-group">
                <label for="Name">Name</label>
                <InputText @bind-Value=newOperation.Name class="form-control" id="Name" />
            </div>
            <div class="form-group">
                <label for="Type">Operation Type</label>
                <InputSelect @bind-Value="newOperation.OperationTypeId" class="form-control" id="Type">
                    @foreach (var operationType in OperationTypes) {
                        <option value="@operationType.Id">@operationType.Name</option>
                    }
                </InputSelect>
            </div>
            <div class="form-group">
                <label for="Amount">Amount</label>
                <InputNumber @bind-Value="newOperation.Amount" class="form-control" id="Amount" />
            </div>
            <div class="form-group">
                <label for="Date">Date</label>
                <InputDate @bind-Value="newOperation.Date" class="form-control" id="Date" />
            </div>
        </EditForm>
    </DialogComponent>
}

@if (UpdateDialogOpen) {
    <DialogComponent Title="Update Operation X" OnClose="@OnUpdateDialogClose">
        <EditForm Model="@newOperation">
            <div class="form-group">
                <label for="Name">Name</label>
                <InputText @bind-Value=newOperation.Name class="form-control" id="Name" />
            </div>
            <div class="form-group">
                <label for="Type">Operation Type</label>
                <InputSelect @bind-Value="newOperation.OperationTypeId" class="form-control" id="Type">
                    <option value="Income">Income</option>
                    <option value="Expense">Expense</option>
                </InputSelect>
            </div>
            <div class="form-group">
                <label for="Amount">Amount</label>
                <InputNumber @bind-Value="newOperation.Amount" class="form-control" id="Amount" />
            </div>
            <div class="form-group">
                <label for="Date">Date</label>
                <InputDate @bind-Value="newOperation.Date" class="form-control" id="Date" />
            </div>
        </EditForm>
    </DialogComponent>
}

@if (DeleteDialogOpen) {
    <DialogComponent Title="Are you sure?" OnClose="@OnDeleteDialogClose">
        Do you want to delete this entry?
    </DialogComponent>
}

<table class="table">
    <thead>
        <tr>
            <th>Operation Name</th>
            <th>Operation Type</th>
            <th>Amount</th>
            <th>Date</th>
            <th>
                <button type="button" class="btn" @onclick="() => OpenCreateDialog()">Create</button>
            </th>
        </tr>
    </thead>
    <tbody>
        @foreach (var operation in operations) {
            <tr>
                <td>@operation.Name</td>
                <td>@operation.OperationTypeName</td>
                <td>@operation.Amount</td>
                <td>@operation.Date.ToShortDateString()</td>
                <td>
                    <button type="button" class="btn" @onclick="() => OpenUpdateDialog(operation)">Edit</button>
                    <button type="button" class="btn" @onclick="() => OpenDeleteDialog(operation)">Delete</button>
                </td>
            </tr>
        }
    </tbody>
</table>

@code {
    private List<Operation> operations = new List<Operation>();
    private OperationCreateDTO newOperation = new OperationCreateDTO();
    private List<OperationType> OperationTypes = new List<OperationType>();
    private Operation currentOperation;

    protected override async Task OnInitializedAsync() {

        await LoadDataAsync();

        OperationTypes = await OperationTypesService.GetAllAsync();
    }

    #region DeleteDialog

    public bool DeleteDialogOpen { get; set; }

    private void OpenDeleteDialog(Operation operation) {
        DeleteDialogOpen = true;
        currentOperation = operation;
        StateHasChanged();
    }

    private async Task OnDeleteDialogClose(bool accepted) {
        DeleteDialogOpen = false;
        
        if (accepted) {
            await OperationsService.DeleteAsync(currentOperation.Id);
        }


        currentOperation = null;
        StateHasChanged();
        await LoadDataAsync();
    }
    #endregion

    #region CreateDialog
    public bool CreateDialogOpen { get; set; }

    private void OpenCreateDialog() {
        CreateDialogOpen = true;
        StateHasChanged();
    }

    private async Task OnCreateDialogClose(bool accepted) {
        CreateDialogOpen = false;

        if (accepted) {
            await OperationsService.CreateAsync(newOperation);
        }

        StateHasChanged();
        await LoadDataAsync();
    }
    #endregion

    #region UpdateDialog
    public bool UpdateDialogOpen { get; set; }

    private void OpenUpdateDialog(Operation operation) {
        UpdateDialogOpen = true;
        currentOperation = operation;
        StateHasChanged();
    }

    private async Task OnUpdateDialogClose(bool accepted) {
        UpdateDialogOpen = false;
        await Task.Delay(1);
        //TODO Update logic

        StateHasChanged();
        await LoadDataAsync();
    }
    #endregion

    private async Task LoadDataAsync() {
        operations = await OperationsService.GetAllAsync();
    }
}
